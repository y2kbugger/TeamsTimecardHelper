@using Microsoft.Graph
@using CurrieTechnologies.Razor.PageVisibility
@inject GraphServiceClient GraphClient
@inject PageVisibilityService visibility

@if (active_timecard.State == TimeCardStateUnknown)
{
    <RadzenButton Text="" IsBusy="true" Class="col-md-4 m-1" />
}
else if (active_timecard.State == TimeCardStateNoActiveTimeCard)
{
    <RadzenButton Text="Clock In" IsBusy=@busy Click=@HandleClockIn Class="col-md-4 m-1" />
    <span Class="col-md-4 m-1" />
}
else if (active_timecard.State == TimeCardState.ClockedIn)
{
    <RadzenButton Text="Clock Out" IsBusy=@busy Click=@HandleClockOut Class="col-md-4 m-1" />
    <RadzenButton Text="Start Break" IsBusy=@busy Click=@HandleStartBreak Class="col-md-4 m-1" />
}
else if (active_timecard.State == TimeCardState.OnBreak)
{
    <span Class="col-md-4 m-1" />
    <RadzenButton Text="End Break" IsBusy=@busy Click=@HandleEndBreak Class="col-md-4 m-1" />
}
else if (active_timecard.State == TimeCardState.ClockedOut)
{
    <div>Clocked out timecard should not be active. Please refresh the page.</div>
}

@code {
    [Parameter]
    public required string? TeamId { get; set; }
    [Parameter]
    public EventCallback OnChangeState { get; set; }

    private bool busy = false;
    private const TimeCardState TimeCardStateUnknown = (TimeCardState)9901;
    private const TimeCardState TimeCardStateNoActiveTimeCard = (TimeCardState)9902;
    private TimeCard active_timecard = new TimeCard() { State = TimeCardStateUnknown };

    private bool _fetching_activetimecard = false;
    private async Task FetchActiveTimecard()
    {
        if (_fetching_activetimecard)
            return;
        try
        {
            _fetching_activetimecard = true;
            await _FetchActiveTimecardInner();
        }
        finally
        {
            _fetching_activetimecard = false;
        }
    }
    private async Task _FetchActiveTimecardInner()
    {
        if (TeamId == null)
            return;

        var tcs = await GraphClient.Teams[TeamId].Schedule.TimeCards
            .Request()
            .Filter("state eq 'clockedIn'")
            .Top(1)
            .GetAsync();

        // api doesnt support 'or' or not equal, so we have to do this
        // M$ == Clowns
        if (tcs.Count == 0)
            tcs = await GraphClient.Teams[TeamId].Schedule.TimeCards
                .Request()
                .Filter("state eq 'onBreak'")
                .Top(1)
                .GetAsync();

        if (tcs.Count == 0)
            active_timecard = new TimeCard() { State = TimeCardStateNoActiveTimeCard };
        else if (tcs.Count == 1)
            active_timecard = tcs[0];
        else if (tcs.Count > 1)
            throw new Exception("More than one active timecard");
        StateHasChanged();
    }

    Timer? update_active_timecard;
    Timer? update_active_timecard_if_vis;
    protected override async Task OnInitializedAsync()
    {
        update_active_timecard = new Timer(async _ => await FetchActiveTimecard(), null, TimeSpan.Zero, TimeSpan.FromMinutes(18));
        update_active_timecard_if_vis = new Timer(async _ => await visibility.RunIfVisibleAsync(FetchActiveTimecard), null, TimeSpan.Zero, TimeSpan.FromMinutes(4));

        // This updates timecards when the page becomes visible
        await visibility.OnVisibilityChangeAsync(async _ => await FetchActiveTimecard(), this);
    }

    private async Task HandleClockIn()
    {
        busy = true;
        StateHasChanged();
        try
        {
            var resp = await GraphClient.Teams[TeamId].Schedule.TimeCards.ClockIn()
                .Request()
                .PostResponseAsync();
            resp.StatusCode.EnsureSuccessStatusCode();
            active_timecard = await resp.GetResponseObjectAsync();
        }
        finally
        {
            busy = false;
        }
        await OnChangeState.InvokeAsync();
    }
    private async Task HandleClockOut()
    {
        busy = true;
        StateHasChanged();
        try
        {
            var resp = await GraphClient.Teams[TeamId].Schedule.TimeCards[active_timecard.Id].ClockOut()
                .Request()
                .PostResponseAsync();
            resp.StatusCode.EnsureSuccessStatusCode();
            active_timecard = new TimeCard { State = TimeCardStateNoActiveTimeCard };
        }
        finally
        {
            busy = false;
        }
        await OnChangeState.InvokeAsync();
    }
    private async Task HandleStartBreak()
    {
        busy = true;
        StateHasChanged();
        try
        {
            var resp = await GraphClient.Teams[TeamId].Schedule.TimeCards[active_timecard.Id].StartBreak()
                .Request()
                .PostResponseAsync();
            resp.StatusCode.EnsureSuccessStatusCode();
            active_timecard.State = TimeCardState.OnBreak;
        }
        finally
        {
            busy = false;
        }
        await OnChangeState.InvokeAsync();
    }
    private async Task HandleEndBreak()
    {
        busy = true;
        StateHasChanged();
        try
        {
            var resp = await GraphClient.Teams[TeamId].Schedule.TimeCards[active_timecard.Id].EndBreak()
                .Request()
                .PostResponseAsync();
            resp.StatusCode.EnsureSuccessStatusCode();
            active_timecard.State = TimeCardState.ClockedIn;
        }
        finally
        {
            busy = false;
        }
        await OnChangeState.InvokeAsync();
    }
}
