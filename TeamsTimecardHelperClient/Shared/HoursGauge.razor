@using Microsoft.Graph
@using CurrieTechnologies.Razor.PageVisibility
@using static TimeCardDuration
@inject GraphServiceClient GraphClient
@inject ClientSettings clientsettings
@inject PageVisibilityService visibility

<RadzenRadialGauge>
    @{
        int target = clientsettings.targetweeklyhours;
        int lower = target - 5;
        // snap to the nearest 5
        lower = (lower / 5) * 5;
        int upper = target + 5;
        upper = (upper / 5) * 5;
    }
    <RadzenRadialGaugeScale Min="0" Max=@upper Step=5 TickPosition="GaugeTickPosition.Outside" MinorStep="1">
        <RadzenRadialGaugeScalePointer Value="@(TotalTimespan(TimeCards)?.TotalHours ?? 0)">
            <Template Context="pointer">
                <div class="totalhours-container">
                    <div class="totalhours-value">
                        <span>@FormatDuration(TotalTimespan(TimeCards))</span>
                    </div>
                    <div class="totalhours-units">
                        HH:MM:SS
                    </div>
                </div>
            </Template>
        </RadzenRadialGaugeScalePointer>
        <RadzenRadialGaugeScaleRange From="0" To=@lower Fill="green" />
        <RadzenRadialGaugeScaleRange From=@lower To=@target Fill="orange" />
        <RadzenRadialGaugeScaleRange From=@target To=@upper Fill="red" />
    </RadzenRadialGaugeScale>
</RadzenRadialGauge>

@code {
    [Parameter]
    public required IEnumerable<TimeCard>? TimeCards { get; set; }

    protected override void OnInitialized()
    {
    }
}
