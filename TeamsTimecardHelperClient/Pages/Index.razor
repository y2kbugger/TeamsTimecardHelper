@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@attribute [Authorize]
@inject GraphServiceClient GraphClient

<h3>Graph Client Example</h3>

@if (user != null)
{
    <p>Hello @user.DisplayName</p>
}

@if (shits != null)
{
    <p>shifts: @shits.ToString()</p>
    <p>shifts count: @shits.Count()</p>
    <p>shifts startdatetime: @shits[0].SharedShift.StartDateTime</p>
    <h2>Teams Scheduled Shift</h2>
    foreach (var shift in shits)
    {
        <p>shift: @shift.Id, created datetime: @shift.CreatedDateTime</p>
    }
}

@if (teams != null)
{
    <h2>All Teams</h2>
    foreach (var team in teams)
    {
        <p>team: @team.DisplayName</p>
    }
}

@if (theteam != null)
{
    <h2>Selected Team</h2>
    <p>team: @theteam.DisplayName</p>
    <p>teamId: @theteam.Id</p>
}

@if (timecards != null)
{
    <h2>Timecards</h2>
    <table>
        <tr>
            <th>Id</th>
            <th>Start</th>
            <th>End</th>
            <th>Duration</th>
        </tr>
        @foreach (var timecard in timecards)
        {
            <tr>
                <td>@timecard.Id</td>
                <td>@timecard.ClockInEvent.DateTime</td>
                <td>@timecard.ClockOutEvent.DateTime</td>
                <td>@(timecard.ClockOutEvent.DateTime-timecard.ClockInEvent.DateTime)</td>
            </tr>
        }
    </table>
}

@code {
    private User? user;
    private IScheduleShiftsCollectionPage? shits;
    private IUserJoinedTeamsCollectionWithReferencesPage? teams;
    private Team? theteam;
    private IScheduleTimeCardsCollectionPage? timecards;

    protected override async Task OnInitializedAsync()
    {
        user = await GraphClient.Me
            .Request()
            .GetAsync();
        StateHasChanged();

        teams = await GraphClient.Me.JoinedTeams
            .Request()
            .GetAsync();
        StateHasChanged();

        theteam = teams[0];
        StateHasChanged();

        shits = await GraphClient.Teams[theteam.Id].Schedule.Shifts
            .Request()
            .GetAsync();
        StateHasChanged();

        timecards = await GraphClient.Teams[theteam.Id].Schedule.TimeCards
            .Request()
            .GetAsync();


    }
}
