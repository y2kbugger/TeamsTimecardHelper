@page "/"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using CurrieTechnologies.Razor.PageVisibility
@using static TimeCardDuration

@inject IJSRuntime js
@inject GraphServiceClient graphclient
@inject ClientSettings clientsettings
@inject NavigationManager nav
@inject PageVisibilityService visibility

<PageTitle> This Week: @FormatDuration(TotalTimespan(current_timecards)) </PageTitle>

<div class="row justify-content-start m-1" style="position: fixed; top: 0; left: 0; z-index:100; width: 40em;">
    <ClockInOut TeamId=@clientsettings.theteamid OnChangeState=@FetchAllTimecards/>
    <RadzenDatePicker DateRender=@DateRenderSundays
        TValue="DateTime" @bind-Value=@StartOfWeek
        DateFormat="yyyy-MM-dd"
        Class="col-3 m-1" />
</div>
<div class="d-flex flex-row mx-auto" style="max-width:fit-content">
    <HoursGauge TimeCards="@current_timecards" />
    <div class="divider mx-5" style="width:1px; background-color: #8b8b8b"></div>
    <div class="mx-auto">
        <h6>Since <em>@clientsettings.statsstartdate:</em></h6>
        <div class="mx-auto">
            <p class="mx-auto"> <small>Average: <em>@(average_weekly_hours_since(clientsettings.statsstartdate).TotalHours.ToString("F1")) hr/wk</em></small> </p>
            @{ var excess = excess_hours_banked(clientsettings.statsstartdate, new TimeSpan(clientsettings.targetweeklyhours, 0, 0)); }
            @if (excess > new TimeSpan(0))
            { <p class="mx-auto"><small>Excess Hours Banked: <em>@(FormatDurationShort(excess))</em></small></p>}
            else
            { <p class="mx-auto"><small>Behind by: <em>@(FormatDurationShort(-1 * excess))</em></small></p>}
            <p class="mx-auto" style="color:rgb(93, 93, 93)"><small>@@@clientsettings.targetweeklyhours hr/wk</small></p>
        </div>
    </div>
</div>

@if (current_timecards != null)
{
    int timecard_ix = 0;

    @foreach (var timecard in current_timecards.OrderByDescending(x => x.ClockInEvent.DateTime))
    {
        var clockin = timecard.ClockInEvent.DateTime!.Value.ToLocalTime();
        var clockout = timecard.ClockOutEvent?.DateTime!.Value.ToLocalTime();
        var mytimecard_ix = timecard_ix++;
        <RadzenCard class="card w-80 my-3 p-3 mx-auto" style="width: 700px;">
            <RadzenPanel Collapsed=@(mytimecard_ix!=0) AllowCollapse="true">
                <HeaderTemplate>
                    <span class="flex-grow-1">
                        <em>@clockin.ToString("yyyy-MM-dd")</em><span class="me-2">:</span><b>@clockin.ToString("t")</b><span class="mx-2">-</span><b>@(clockout?.ToString("t") ?? "Still clocked in")</b>
                    </span>
                    <span class="font-monospace px-5 h4 my-0">
                        @(FormatDurationShort(HoursFromTimeCard(timecard)))
                    </span>
                </HeaderTemplate>
                <ChildContent>
                    <hr/>
                    <form class="m-4">
                        <div class="mb-3 row">
                            <label for="clockindatetime" class="col-sm-2 col-form-label pt-0 text-end"><b>Clock in</b></label>
                            <div class="col-sm-10">
                                <input
                                    type="datetime-local"
                                    value=@(clockin.ToString("yyyy-MM-ddTHH:mm:ss"))
                                    @onchange=@(async (ChangeEventArgs e) => await update_start_and_end_time_for_timecard(timecard.Id, DateTime.Parse((string)e.Value!).ToUniversalTime(), timecard.ClockOutEvent?.DateTime)) />
                            </div>
                        </div>
                        @if(clockout != null)
                        {
                        <div class="mb-3 row">
                            <label for="clockoutdatetime" class="col-sm-2 col-form-label pt-0 text-end"><b>Clock out</b></label>
                            <div class="col-sm-10">
                            <input
                                type="datetime-local"
                                value=@(clockout.Value.ToString("yyyy-MM-ddTHH:mm:ss"))
                                @onchange=@(async (ChangeEventArgs e) => await update_start_and_end_time_for_timecard(timecard.Id, timecard.ClockInEvent.DateTime!.Value, DateTime.Parse((string)e.Value!).ToUniversalTime() )) />
                            </div>
                        </div>
                        }
                        <div class="mb-3 row">
                            <label for="deletetimecard" class="col-sm-2 col-form-label pt-0 text-end"><b>Delete Timecard</b></label>
                            <div class="col-sm-10">
                                <button type="button" class="btn btn-danger" @onclick=@(async () => await delete_timecard(timecard.Id))>Delete</button>
                            </div>
                        </div>
                    </form>
                    <pre class="card m-2 p-2">
                        @(timecard.Notes?.Content ?? "No notes.")
                    </pre>

                    @if (timecard.Breaks.Count() > 0)
                    {
                        <div class="mt-5">
                            <h4 class="pt-1">Break Details</h4>
                            <table class="table">
                                <thead class="thead-light">
                                    <tr>
                                        <th>Start Time</th>
                                        <th>End Time</th>
                                        <th>Duration</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var breaktime in timecard.Breaks)
                                    {
                                        <tr>
                                            <td>@breaktime.Start.DateTime!.Value.ToLocalTime().ToString("t")</td>
                                            <td>@(breaktime.End != null ? breaktime.End.DateTime!.Value.ToLocalTime().ToString("t") : "Still on break")</td>
                                            @if(breaktime.End != null)
                                            {
                                                <td>@(FormatDurationShort(breaktime.End.DateTime - breaktime.Start.DateTime))</td>
                                            }
                                            else
                                            {
                                                <td>@(FormatDurationShort(DateTime.UtcNow - breaktime.Start.DateTime))</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </ChildContent>
                <SummaryTemplate>
                </SummaryTemplate>
            </RadzenPanel>
        </RadzenCard>
    }
}

@code {
    private IScheduleTimeCardsCollectionPage? timecards;

    public DateTime StartOfWeek = DateTime.Today.AddDays(-1 * (7 + (DateTime.Today.DayOfWeek - System.DayOfWeek.Sunday)) % 7).Date;

    private List<TimeCard>? all_timecards = null;
    private List<TimeCard>? current_timecards =>
        all_timecards?.Where(
            x => (x.ClockInEvent.DateTime >= StartOfWeek)
            && (x.ClockInEvent.DateTime <= StartOfWeek.AddDays(7))
            ).ToList(); // todo: handle case where timecard spans midnight at end of week

    private TimeSpan average_weekly_hours_since(DateOnly start)
    {
        var start_dt = start.ToDateTime(TimeOnly.MinValue);
        start_dt = start_dt.AddDays(-1 * (7 + (start_dt.DayOfWeek - System.DayOfWeek.Sunday)) % 7).Date;
        var weeks_since_start_week = 1+((StartOfWeek - start_dt).TotalDays / 7);
        var timecards_since_start_week = all_timecards?.Where(
            x => (x.ClockInEvent.DateTime >= start_dt)
            && (x.ClockInEvent.DateTime <= StartOfWeek.AddDays(7))
            ).ToList();
        TimeSpan hours_since_start_week = TotalTimespan(timecards_since_start_week) ?? new TimeSpan();
        return hours_since_start_week / weeks_since_start_week;
    }
    private TimeSpan excess_hours_banked(DateOnly start_do, TimeSpan target_weekly_hours)
    {
        var start = start_do.ToDateTime(TimeOnly.MinValue);
        start = start.AddDays(-1 * (7 + (start.DayOfWeek - System.DayOfWeek.Sunday)) % 7).Date;
        var weeks_since_start_week = 1+((StartOfWeek - start).TotalDays / 7);

        var target_hours = weeks_since_start_week * target_weekly_hours;
        var actual_hours = weeks_since_start_week * average_weekly_hours_since(DateOnly.FromDateTime(start));
        return actual_hours - target_hours;
    }
    private async Task delete_timecard(string timecard_id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await graphclient.Teams[clientsettings.theteamid].Schedule.TimeCards[timecard_id].Request().DeleteAsync();
            // update loaded timecards
            all_timecards = all_timecards?.Where(x => x.Id != timecard_id).ToList();
        }
    }
    private async Task update_start_and_end_time_for_timecard(string timecard_id, DateTimeOffset new_start, DateTimeOffset? new_end)
    {
        var timecard = all_timecards?.FirstOrDefault(x => x.Id == timecard_id);
        DateTimeOffset? old_start = timecard?.ClockInEvent.DateTime;
        DateTimeOffset? old_end = timecard?.ClockOutEvent?.DateTime;

        if (timecard == null)
        {
            Console.WriteLine($"Timecard {timecard_id} not found");
            return;
        }

        if (timecard.ClockInEvent.DateTime != new_start)
        {
            timecard.ClockInEvent.DateTime = new_start;
            Console.WriteLine($"Updating timecard {timecard_id} to start from {timecard?.ClockInEvent.DateTime} to {new_start}");
        }

        if (timecard!.ClockOutEvent == null)
        {
            Console.WriteLine($"Timecard {timecard_id} is still clocked in, not updating end time");
        }
        else if (timecard.ClockOutEvent.DateTime != new_end)
        {
            timecard.ClockOutEvent.DateTime = new_end;
            Console.WriteLine($"Updating timecard {timecard_id} to end from {timecard?.ClockOutEvent?.DateTime} to {new_end}");
        }
        var request = graphclient.Teams[clientsettings.theteamid].Schedule.TimeCards[timecard_id].Request();
        var response =  await request.PutResponseAsync(timecard);
        if (!response.StatusCode.IsSuccessStatusCode())
        {
            Console.WriteLine($"Error updating timecard {timecard_id}, rolling back changes.");
            if (old_start != null)
                timecard!.ClockInEvent.DateTime = old_start;
            if (old_end != null)
                timecard!.ClockOutEvent!.DateTime = old_end;
        }
    }

    void DateRenderSundays(DateRenderEventArgs args)
    {
        args.Disabled = args.Date.DayOfWeek != System.DayOfWeek.Sunday;
    }

    Timer? update_timecards;
    Timer? update_timecards_if_vis;
    Timer? update_datetimes_in_gui;
    protected override async Task OnInitializedAsync()
    {
        if (clientsettings.theteamid == null)
        {
            Console.WriteLine("No team selected, redirecting to settings");
            nav.NavigateTo("settings");
            return; // or else code below will still run
        }

        // This updates timecards on a longer interval
        update_timecards = new Timer(async _ => await FetchAllTimecards(), null, TimeSpan.Zero, TimeSpan.FromMinutes(98));
        update_timecards_if_vis = new Timer(async _ => await visibility.RunIfVisibleAsync(FetchAllTimecards), null, TimeSpan.Zero, TimeSpan.FromMinutes(24));

        // This updates timecards when the page becomes visible
        await visibility.OnVisibilityChangeAsync(async _ => await FetchAllTimecards(), this);

        // This updates the clock/timecard every second
        update_datetimes_in_gui = new Timer(_ => StateHasChanged(), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private bool _fetching_alltimecards = false;
    private async Task FetchAllTimecards()
    {
        if (_fetching_alltimecards)
            return;
        try
        {
            _fetching_alltimecards = true;
            await _FetchAllTimecardsInner();
        }
        finally
        {
            _fetching_alltimecards = false;
        }
    }
    private async Task _FetchAllTimecardsInner()
    {
        Console.WriteLine("Fetching all timecards");
        timecards = await graphclient.Teams[clientsettings.theteamid].Schedule.TimeCards
            .Request()
            @* None of these query options currently work in the beta API *@
            @* .Filter(@"clockinEvent/dateTime ge '2022-11-22'") *@
            @* .OrderBy("clockInEvent/dateTime") *@
            .Top(900)
            .GetAsync();
        var my_timecards = new List<TimeCard>();
        while (timecards != null)
        {
            my_timecards.AddRange(timecards);
            if (timecards.NextPageRequest != null)
                timecards = await timecards.NextPageRequest.GetAsync();
            else
                timecards = null;
        }
        all_timecards = my_timecards;
        StateHasChanged();
    }
}
