@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using CurrieTechnologies.Razor.PageVisibility
@attribute [Authorize]
@inject GraphServiceClient graphclient
@inject Blazored.LocalStorage.ISyncLocalStorageService localstorage
@inject NavigationManager nav
@inject PageVisibilityService visibility

<div class="container">
    <div class="row justify-content-end mb-3">
        <ClockInOut TeamId=@theteamid OnChangeState=@FetchAllTimecards/>
        <RadzenDatePicker DateRender=@DateRenderSundays
            TValue="DateTime" @bind-Value=@StartOfWeek
            DateFormat="yyyy-MM-dd"
            Class="col-md-2 m-1" />
    </div>
</div>
<h2 class="text-center">Timecard Total</h2>
<div class="d-flex justify-content-center">
    <RadzenRadialGauge>
        <RadzenRadialGaugeScale Min="0" Max="30" Step=5 TickPosition="GaugeTickPosition.Outside" MinorStep="1">
            <RadzenRadialGaugeScalePointer Value="@(total_timespan()?.TotalHours ?? 0)">
                <Template Context="pointer">
                    <div class="totalhours-container">
                        <div class="totalhours-value">
                            <span>@FormatDuration(total_timespan())</span>
                        </div>
                        <div class="totalhours-units">
                            HH:MM:SS
                        </div>
                    </div>
                </Template>
            </RadzenRadialGaugeScalePointer>
            <RadzenRadialGaugeScaleRange From="0" To="20" Fill="green" />
            <RadzenRadialGaugeScaleRange From="20" To="25" Fill="orange" />
            <RadzenRadialGaugeScaleRange From="25" To="30" Fill="red" />
        </RadzenRadialGaugeScale>
    </RadzenRadialGauge>
</div>

<RadzenCard class="w-100 mt-3 p-3">
    <RadzenPanel Collapsed="true" AllowCollapse="true">
        <HeaderTemplate>
            <h2>Technical Details</h2>
        </HeaderTemplate>
        <ChildContent>
            @if (current_timecards != null)
            {
                <h2>Timecards</h2>
                <table>
                    <tr>
                        <th>Id</th>
                        <th>Start</th>
                        <th>End</th>
                        <th>Hours</th>
                    </tr>

                    @foreach (var timecard in current_timecards)
                    {
                        <tr>
                            <td>@timecard.Id</td>
                            <td>@timecard.ClockInEvent.DateTime</td>
                            <td>@(timecard.ClockOutEvent != null ? timecard.ClockOutEvent.DateTime : "~")</td>
                            <td>@(FormatDuration(HoursFromTimeCard(timecard)))</td>
                        </tr>
                    }
                </table>
            }
        </ChildContent>
        <SummaryTemplate>
            @if (theteamid != null)
            {
                <p> All Timecards: <b>@(all_timecards?.Count ?? 0)</b></p>
                <p> Current Timecards: <b>@(current_timecards?.Count ?? 0)</b></p>
            }
        </SummaryTemplate>
    </RadzenPanel>
</RadzenCard>

@code {
    string? theteamid {
        get => localstorage.GetItem<string>("theteamid");
    }
    private IScheduleTimeCardsCollectionPage? timecards;

    public DateTime StartOfWeek = DateTime.Today.AddDays(-1 * (7 + (DateTime.Today.DayOfWeek - System.DayOfWeek.Sunday)) % 7).Date;

    private List<TimeCard>? all_timecards = null;
    private List<TimeCard>? current_timecards =>
        all_timecards?.Where(
            x => (x.ClockInEvent.DateTime >= StartOfWeek)
            && (x.ClockInEvent.DateTime <= StartOfWeek.AddDays(7))
            ).ToList(); // todo: handle case where timecard spans midnight at end of week

    private TimeSpan? total_timespan()
    {
        if (current_timecards == null)
            return null;

        var total = new TimeSpan();
        foreach (var tc in current_timecards)
        {
            total += HoursFromTimeCard(tc);
        }

        // This is required to stop blazor from infinitely re-rendering the page
        return new TimeSpan(total.Days, total.Hours, total.Minutes, total.Seconds);
    }
    private TimeSpan HoursFromTimeCard(TimeCard tc)
    {
            DateTime dt_in = tc!.ClockInEvent?.DateTime?.DateTime ?? throw new Exception("TimeCard.ClockInEvent.DateTime should never not be null");
            DateTime dt_out = tc?.ClockOutEvent?.DateTime?.DateTime ?? DateTime.UtcNow; // Still clocked in
            var hours = (dt_out - dt_in);

            foreach (var b in tc?.Breaks ?? Enumerable.Empty<TimeCardBreak>())
                hours  -=  HoursFromTimeCardBreak(b);

            return hours;
    }

    private TimeSpan HoursFromTimeCardBreak(TimeCardBreak tcb)
    {
        DateTime dt_in = tcb!.Start?.DateTime?.DateTime ?? throw new Exception("TimeCardBreak.Start.DateTime should never not be null");
        DateTime dt_out = tcb?.End?.DateTime?.DateTime ?? DateTime.UtcNow; // Still on break
        var hours = (dt_out - dt_in);
        return hours;
    }

    private string FormatDuration(TimeSpan? ts)
    {
        if (ts == null)
            return "--:--:--";
        var tss = (TimeSpan)ts;
        return $"{(tss.Days * 24) + tss.Hours:00}:{tss.Minutes:00}:{tss.Seconds:00}";
    }

    void DateRenderSundays(DateRenderEventArgs args)
    {
        args.Disabled = args.Date.DayOfWeek != System.DayOfWeek.Sunday;
    }

    Timer? update_datetimes_in_gui;
    Timer? update_timecards;
    Timer? update_timecards_if_vis;
    protected override async Task OnInitializedAsync()
    {
        if (theteamid == null)
        {
            Console.WriteLine("No team selected, redirecting to settings");
            nav.NavigateTo("settings");
            return; // or else code below will still run
        }

        // This updates the clock calculations periodically
        update_datetimes_in_gui = new Timer(_ => StateHasChanged(), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));

        // This updates timecards on a longer interval
        update_timecards = new Timer(async _ => await FetchAllTimecards(), null, TimeSpan.Zero, TimeSpan.FromMinutes(18));
        update_timecards_if_vis = new Timer(async _ => await visibility.RunIfVisibleAsync(FetchAllTimecards), null, TimeSpan.Zero, TimeSpan.FromMinutes(4));

        // This updates timecards when the page becomes visible
        await visibility.OnVisibilityChangeAsync(async _ => await FetchAllTimecards(), this);
    }

    private bool _fetching_alltimecards = false;
    private async Task FetchAllTimecards()
    {
        if (_fetching_alltimecards)
            return;
        try
        {
            _fetching_alltimecards = true;
            await _FetchAllTimecardsInner();
        }
        finally
        {
            _fetching_alltimecards = false;
        }
    }
    private async Task _FetchAllTimecardsInner()
    {
        Console.WriteLine("Fetching all timecards");
        timecards = await graphclient.Teams[theteamid].Schedule.TimeCards
            .Request()
            @* None of these query options currently work in the beta API *@
            @* .Filter(@"clockinEvent/dateTime ge '2022-11-22'") *@
            @* .OrderBy("clockInEvent/dateTime") *@
            .Top(900)
            .GetAsync();
        var my_timecards = new List<TimeCard>();
        while (timecards != null)
        {
            my_timecards.AddRange(timecards);
            if (timecards.NextPageRequest != null)
                timecards = await timecards.NextPageRequest.GetAsync();
            else
                timecards = null;
        }
        all_timecards = my_timecards;
        StateHasChanged();
    }
}