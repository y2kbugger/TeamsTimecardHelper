@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@attribute [Authorize]
@inject GraphServiceClient GraphClient

<h2 class="text-center">Timecard Total</h2>
<div class="d-flex justify-content-center">
    <RadzenRadialGauge>
        <RadzenRadialGaugeScale Min="0" Max="30" Step=5 TickPosition="GaugeTickPosition.Outside" MinorStep="1">
            <RadzenRadialGaugeScalePointer Value="@(total_timespan()?.TotalHours ?? 0)">
                <Template Context="pointer">
                    <div class="totalhours-container">
                        <div class="totalhours-value">
                            <span>@FormatDuration(total_timespan())</span>
                        </div>
                        <div class="totalhours-units">
                            HH:MM
                        </div>
                    </div>
                </Template>
            </RadzenRadialGaugeScalePointer>
            <RadzenRadialGaugeScaleRange From="0" To="20" Fill="green" />
            <RadzenRadialGaugeScaleRange From="20" To="25" Fill="orange" />
            <RadzenRadialGaugeScaleRange From="25" To="30" Fill="red" />
        </RadzenRadialGaugeScale>
    </RadzenRadialGauge>
</div>

<RadzenCard class="w-100 mt-3 p-3">
    <RadzenPanel Collapsed="true" AllowCollapse="true">
        <HeaderTemplate>
            <h2>Technical Details</h2>
        </HeaderTemplate>
        <ChildContent>
            @if (teams != null)
            {
                <h2>All Teams</h2>
                foreach (var team in teams)
                {
                    <p>team: @team.DisplayName</p>
                }
            }

            @if (theteam != null)
            {
                <h2>Selected Team</h2>
                <p><span>Selected Team Id:&nbsp;</span><b>@selected_team_index</b></p>
                <p>team: @theteam.DisplayName</p>
                <p>teamId: @theteam.Id</p>
            }

            @if (current_timecards != null)
            {
                <h2>Timecards</h2>
                <table>
                    <tr>
                        <th>Id</th>
                        <th>Start</th>
                        <th>End</th>
                    </tr>

                    @foreach (var timecard in current_timecards)
                    {
                        <tr>
                            <td>@timecard.Id</td>
                            <td>@timecard.ClockInEvent.DateTime</td>
                            <td>@(timecard.ClockOutEvent != null ? timecard.ClockOutEvent.DateTime : "~")</td>
                        </tr>
                    }
                </table>
            }
        </ChildContent>
        <SummaryTemplate>
            @if (theteam != null)
            {
                <p> Selected Team: <b>@(theteam?.DisplayName ?? "~")</b></p>
                <p> All Timecards: <b>@(all_timecards?.Count ?? 0)</b></p>
                <p> Current Timecards: <b>@(current_timecards?.Count ?? 0)</b></p>
            }
        </SummaryTemplate>
    </RadzenPanel>
</RadzenCard>

@code {
    int selected_team_index = 0;
    private IUserJoinedTeamsCollectionWithReferencesPage? teams;
    private Team? theteam;
    private IScheduleTimeCardsCollectionPage? timecards;

    public DateTime StartOfWeek =>
        DateTime.Today.AddDays(-1 * (7 + (DateTime.Today.DayOfWeek - System.DayOfWeek.Sunday)) % 7).Date;

    private List<TimeCard>? all_timecards = null;
    private List<TimeCard>? current_timecards =>
        all_timecards?.Where(x => x.ClockInEvent.DateTime >= StartOfWeek).ToList();

    private TimeSpan? total_timespan()
    {
        if (current_timecards == null)
            return null;

        var total = new TimeSpan();
        foreach (var tc in current_timecards)
        {
            DateTime dt_in = tc!.ClockInEvent?.DateTime?.DateTime ?? throw new Exception("ClockInEvent.DateTime should never not be null");
            DateTime dt_out = tc?.ClockOutEvent?.DateTime?.DateTime ?? DateTime.UtcNow;
            var hours = (dt_out - dt_in);
            total = total + hours;
        }

        // This is required to stop blazor from infinitely re-rendering the page
        return new TimeSpan(total.Days, total.Hours, total.Minutes, total.Seconds);
    }

    private string FormatDuration(TimeSpan? ts)
    {
        if (ts == null)
            return "--:--";
        var tss = (TimeSpan)ts;
        return String.Format("{0:00}:{1:00}", (tss.Days * 60) + tss.Hours, tss.Minutes);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await GraphClient.Me
        .Request()
        .GetAsync();
        StateHasChanged();

        teams = await GraphClient.Me.JoinedTeams
        .Request()
        .GetAsync();
        StateHasChanged();

        theteam = teams[selected_team_index];
        StateHasChanged();


        await FetchAllTimecards();

    }

    private async Task FetchAllTimecards()
    {
        timecards = await GraphClient.Teams[theteam.Id].Schedule.TimeCards
            .Request()
            @* None of these query options currently work in the beta API *@
            @* .Filter(@"clockinEvent/dateTime ge '2022-11-22'") *@
            @* .OrderBy("clockInEvent/dateTime") *@
            .Top(900)
            .GetAsync();
        var my_timecards = new List<TimeCard>();
        while (timecards != null)
        {
            my_timecards.AddRange(timecards);
            if (timecards.NextPageRequest != null)
                timecards = await timecards.NextPageRequest.GetAsync();
            else
                timecards = null;
        }
        all_timecards = my_timecards;
    }
}
